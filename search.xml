<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>crazy os(1) Bochs for Windows的安装和初步使用</title>
      <link href="/2020/07/19/crazy-os-1-Bochs-for-Windows%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/19/crazy-os-1-Bochs-for-Windows%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>#步骤如下：</p><h2 id="1-安装Bochs"><a href="#1-安装Bochs" class="headerlink" title="1.安装Bochs"></a>1.安装Bochs</h2><p>这一个步骤无需多言。安装时建议全部勾选，即全部安装。</p><h2 id="2-创建虚拟机映像img文件"><a href="#2-创建虚拟机映像img文件" class="headerlink" title="2.创建虚拟机映像img文件"></a>2.创建虚拟机映像img文件</h2><p>打开Bochs的安装目录，双击bximage.exe文件，如下图所示：<br><img src="images/crazyos01/01.png" alt="双击之后弹出的命令行" title="双击之后弹出的命令行"><br>然后，分别输入以下内容：<br><img src="images/crazyos01/10.png" alt="输入命令" title="输入命令"></p><h2 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h2><p>新建bochsrc文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">megs:32</span><br><span class="line"></span><br><span class="line">romimage:file&#x3D;$BXSHARE&#x2F;BIOS-bochs-latest</span><br><span class="line">vgaromimage:file&#x3D;$BXSHARE&#x2F;VGABIOS-lgpl-latest</span><br><span class="line"></span><br><span class="line">floppya:1_44&#x3D;a.img,status&#x3D;inserted</span><br><span class="line"></span><br><span class="line">boot:floppy</span><br><span class="line"></span><br><span class="line">log:bochsout.txt</span><br><span class="line"></span><br><span class="line">mouse:enabled&#x3D;0</span><br><span class="line"></span><br><span class="line">keyboard: keymap&#x3D;$BXSHARE&#x2F;keymaps&#x2F;x11-pc-de.map</span><br></pre></td></tr></table></figure><h2 id="4-生成bin文件"><a href="#4-生成bin文件" class="headerlink" title="4.生成bin文件"></a>4.生成bin文件</h2><p>首先，将boot.asm文件使用nasm编译成boot.bin文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm boot.asm -o boot.bin</span><br></pre></td></tr></table></figure><p>之后，使用dd.exe在该文件所在文件夹的命令行（即命令行中跳转到这个文件夹的位置）下输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if&#x3D;boot.bin of&#x3D;a.img bs&#x3D;512 count&#x3D;1 conv&#x3D;notrunc</span><br></pre></td></tr></table></figure><h2 id="5-运行虚拟机"><a href="#5-运行虚拟机" class="headerlink" title="5.运行虚拟机"></a>5.运行虚拟机</h2><p>首先在Bochs的安装目录中创建一个文件夹，其中有bin文件,img文件，还有，bochsrc文件：<br><img src="images/crazyos01/03.png" alt="新建的文件夹中的内容" title="新建的文件夹的内容"><br><img src="images/crazyos01/04.png" alt="安装目录中的内容" title="安装目录中的内容"><br>之后，进入新建的文件夹，输入如下所示的命令：<br><img src="images/crazyos01/06.png" alt="输入命令之后的结果" title="输入命令之后的结果"><br>选择Disk &amp; Boot，之后点击左侧的edit，之后会自动选择选择刚刚新建的文件夹之中的img文件，并将Boot Option的选项卡中的第一个启动项设为floopy（软盘），点击OK，然后点击start，具体如下图：<br><img src="images/crazyos01/08.png" alt="选择" title="选择"><br><img src="images/crazyos01/09.png" alt="启动效果" title="启动效果"><br>然后就开始启动了，启动效果如图所示：<br><img src="images/crazyos01/07.png" alt="启动效果" title="启动效果"></p><p>以上内容仅供参考，具体的细节需要自己操作。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>近期flutter开发有感</title>
      <link href="/2020/07/07/%E8%BF%91%E6%9C%9Fflutter%E5%BC%80%E5%8F%91%E6%9C%89%E6%84%9F/"/>
      <url>/2020/07/07/%E8%BF%91%E6%9C%9Fflutter%E5%BC%80%E5%8F%91%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;期末考试全部结束之后，我就开始了flutter的开发。在这个我得个人博客中，我并不想说很多的太过于技术性的东西，毕竟我写代码过程中的资料来源于网络上的博客，文档等资料，那些技术上的文档，我无意再复述一遍。所以，在本篇文章中，我来说一下近期我开发的一些感受吧。<br>&emsp;&emsp;刚刚接触flutter开发，我并没有学习Dart语言，因为学习语言很耗费时间，并且和实际的开发脱节。因此，我只花费了两个小时的时间，简单的熟悉了Dart，发现和Java是类似的。于是，我不再执着于Dart语言的学习，开始了flutter的开发。<br>&emsp;&emsp;首先，我配置了flutter的环境。我使用的是压缩包解压后，使用命令行安装的方式。安装之后，我的电脑上本身就有Android Studio，所以，我将这个软件作为flutter的开发工具。在这个软件上安装flutter和Dart插件，之后就可以直接在该软件中创建flutter项目。<br>&emsp;&emsp;接下来，根据flutter的开发文档，我在flutter中，实现了底部任务栏的切换。这个在开发文档中有详细的说明，比较简单。接下来，就是首页和新页面的连接。这个耗费了我一定时间，这才把多页面这个事情弄明白。之后，在软件中，实现了加载网页的功能。这个因为网上有相关的内容，所以比较简单。之后，就是创建本地航概题库的功能。本地题库，确实是一个浩大的工程。在实际开发中，先假设所有的题都是一样的，那么，我们的开发就会相对简单，具体的题目后期会修改。题库的开发，比较耗费时间，需要判断正误，还有判断正确率。其中，还有按钮功能和颜色的切换。这些，都不是容易的事情，都是自己一点一点摸索的。<br>&emsp;&emsp;接下来，就是跳转到微信公众号的功能。这个功能无法实现，因为微信的种种限制。我们尝试网页跳转，schema跳转，SDK跳转等方式，但是都无法实现功能。微信，是一个闭环的生态，其实它很封闭。微信自己的网页，只能够在微信自己的浏览器中才能打开。<br>&emsp;&emsp;接下来，是主题的设置。本来，想要在设置里面写主题切换，但是因为setState((){})这个函数无法在static的函数中使用，我们不得不在首页使用。又因为appBar中的iconbutton无法实现下部弹出菜单，我们只能一次点击切换一个主题，而不能在菜单中选择。<br>&emsp;&emsp;从几天的flutter的开发来看，flutter在界面开发上，确实比传统的Android开发更加简单。传统的Android布局，需要对于组件的位置有很多的设置。但是flutter的开发确实让组件的开发变得更加简单。通过添加依赖的方式，使得flutter具有了很多的功能。flutter具有的跨平台的特性，让安卓和iOS应用能够一次开发，多端生成应用。flutter也可开发web端，未来，flutter还可以开发桌面端应用，真正实现开发全平台应用。我比较看好flutter的未来。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的软工论坛开发心得</title>
      <link href="/2020/06/25/%E6%88%91%E7%9A%84%E8%BD%AF%E5%B7%A5%E8%AE%BA%E5%9D%9B%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97/"/>
      <url>/2020/06/25/%E6%88%91%E7%9A%84%E8%BD%AF%E5%B7%A5%E8%AE%BA%E5%9D%9B%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;这是我真正的去写一篇博客文章。软工项目，是我做的最有成就感的事情。在我们的软工团队中，绝大多数工作量都是我做的。技术的探索，也是我做的。这一路走来，就是半年。这半年的软工项目开发，道路曲折，但是最后，实现了全部的功能。<br>&emsp;&emsp;3月份到4月份，我一直在探索开发论坛的技术。一开始，我们选择了discuz，因为它搭建论坛十分简单，无需写太多的代码。但是，学校要求不能走这种捷径，需要从头到尾开发代码。于是，就是漫长的对技术的探索。<br>&emsp;&emsp;我首先考虑到的是spring，但是在配置环境方面，出现了很多的问题。由于墙的存在，无法创建项目，即使是挂梯子，也无法创建项目。而且，代码较为复杂。<br>&emsp;&emsp;之后，我又考虑了Django。但是，出现了和spring一样的问题。直到课程后期，我们才又有了一丝方向。助教采用了vue+flask的方式进行开发。这时，我又开始了实验。<br>&emsp;&emsp;首先，我在课程实验中简单了解了vue和flask的使用。之后，深入了解了vue的开发。再之后，我开始了软工项目的开发。<br>&emsp;&emsp;之后，是前后端环境的配置。这个事情，耗费了我很多的功夫。环境的配置成功，意味着我们的项目可以在本地运行了。<br>&emsp;&emsp;之后，是前端页面的部分内容的设计。在这个设计中，我们寻找了几个UI，最后敲定的是bootstrap，这个UI具有响应式设计。<br>&emsp;&emsp;之后，我们开始了功能的实现。功能的实现，总的来说，是一步一个脚印的，走得非常踏实。我们首先开始简单的登录注册功能的开发。这个功能的开发，是后端开发以及前后端的对接的试验，为后续功能的实现打下了坚实的基础。这里面，最头疼的问题是怎么发送数据，怎么接收数据。这个问题，又弄了好几天，才终于实现。<br>&emsp;&emsp;在功能实现的部分，我们一一解决了以下的问题：文件的发送；图片的发送和接收，数据库的使用等等，并且根据实际需求，增加了很多element-ui的元素。这些元素，进一步优化了页面的设计，并且帮助我们实现了很多的功能。我们在开发的过程中，不断地调整。比如说，我们中途将假数据换成了数据库中的数据，将数据库的引擎进行了更换。边开发边尝试，边开发边调整，边开发边学习，一个问题一个问题地解决问题。终于，在截止日期即将到来的时候，我们进入了小组开发阶段。有了我个人的这些努力，小组开发才会更加顺畅。<br>&emsp;&emsp;小组开发阶段，我的组员和我一样，也经历了学习的过程。他们要做的，就是看懂我的代码。为此，我们开了腾讯会议，让我的组员更加了解代码的结构，更加了解代码的逻辑。他们了解了代码之后，我们共同开发，在各自的电脑上实现功能。这时，我们各自的代码，虽然在不同的电脑上，但是已经连接在了同一个云上的数据库。很显然，这大大提高了开发效率。下一步是将我们团队各个成员的代码进行合并。我们采取的策略是，如果组员的代码和总分支没有冲突的话，则直接合并到这个远程的总分支。如果有冲突的话，就先上传到各自的远程分支，再在github网页中处理冲突。就这样，我们各自开发的代码，就已经合并成功了。到这时，我们的项目基本上开发完成了。<br>&emsp;&emsp;接下来这个阶段，是部署与调试阶段。在开发初期，我就试着把项目部署到云端上，这样，我就可以在项目的部署阶段直接把项目部署到云端上，而不用在这个阶段摸索部署的方法，减少了时间的浪费。我们把项目部署上去之后，我们开始了调试。这里的调试，是指测试并修复其中的bug。我们已经消灭了很多的bug，保证了功能的可使用性。<br>&emsp;&emsp;这一路走来，就是半年。有焦虑，有焦躁，有喜悦，有激动。通过这个小组开发，我们提升了前后端的开发能力，实现了能力的新跨越。未来，我们还将努力，让我们的开发更加高效，开发能力显著提高，开发水平更加优秀。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2020/06/19/hello/"/>
      <url>/2020/06/19/hello/</url>
      
        <content type="html"><![CDATA[<p>今天，我的博客正式开通了。未来，我将在这里书写我的编程心得。大家可以在我的每一篇文章下，书写评论，告诉我大家的体会和心得，告诉我博客文章的不足。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/19/hello-world/"/>
      <url>/2020/06/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Added"><a href="#Added" class="headerlink" title="Added"></a>Added</h3><p>创建博文并在本地预览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>创建新页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure><p>部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
